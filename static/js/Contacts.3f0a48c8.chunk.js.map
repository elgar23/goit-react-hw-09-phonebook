{"version":3,"sources":["Page/Contacts/Contacts.module.css","Components/Contacts/Contacts.module.css","Components/UpDate/UpData.module.css","Components/Phonebook/Phonebook.module.css","Components/Filter/Filter.module.css","Components/Alert/Alert.module.css","redux/Contacts/listOperations.js","redux/Contacts/contacts-selectors.js","Components/UpDate/UpDate.js","Components/Contacts/Contact.js","Components/Phonebook/Phonebook.js","Components/Filter/Filter.js","Components/Alert/Alert.js","Page/Contacts/Contacts.js"],"names":["module","exports","fetchList","dispatch","fetchStart","axios","get","then","r","fetchSuccess","data","catch","error","fetchError","message","upList","id","text","number","item","name","upStart","patch","upSuccess","upError","getContactsItems","state","contacts","items","getFilter","filter","getFilterContact","createSelector","filterToLowerCase","toLowerCase","includes","UpDate","propNumber","propName","propAlert","useDispatch","useSelector","useState","setText","setNumber","alert","setAlert","className","s","form","onSubmit","e","preventDefault","map","setTimeout","label","input","type","value","placeholder","onChange","target","max","disabled","button","Contact","clickUp","setClickUp","useEffect","div","TransitionGroup","component","ul","CSSTransition","classNames","timeout","li","span","span2","onClick","deleteStart","delete","deleteSuccess","deleteError","Phonebook","phonebookValue","Filter","container","filterList","Alert","massage","h1","Contacts","text2","setText2","setMessage","message2","setMessage2","luseFanc","textAlarm","mapContacts","useCallback","App","notif","in","appear","unmountOnExit","addStart","post","addSuccess","addError","addList","length"],"mappings":"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","file":"static/js/Contacts.3f0a48c8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"Contacts_App__18o1Y\",\"appear\":\"Contacts_appear__26Krp\",\"appearActive\":\"Contacts_appearActive__3m4dW\",\"notif\":\"Contacts_notif__7yRdL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ul\":\"Contacts_ul__lm6GA\",\"li\":\"Contacts_li__2i_tt\",\"div\":\"Contacts_div__1mrSm\",\"button\":\"Contacts_button__PPvrD\",\"enter\":\"Contacts_enter__1n2Kk\",\"enterActive\":\"Contacts_enterActive__2QSaW\",\"exit\":\"Contacts_exit__PURA5\",\"exitActive\":\"Contacts_exitActive__3tfA5\",\"span2\":\"Contacts_span2__2XzlR\",\"span\":\"Contacts_span__3AqGf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"UpData_button__8Sq5T\",\"input\":\"UpData_input__3l-H0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Phonebook_form__1d6OB\",\"button\":\"Phonebook_button__Pm1BP\",\"label\":\"Phonebook_label__3P9UB\",\"input\":\"Phonebook_input__39upi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Filter_input__KL77Z\",\"container\":\"Filter_container__vbRph\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"div\":\"Alert_div__1DPP8\",\"h1\":\"Alert_h1__1yG14\"};","import axios from 'axios';\nimport {\n  addStart,\n  addSuccess,\n  addError,\n  deleteStart,\n  deleteSuccess,\n  deleteError,\n  fetchStart,\n  fetchSuccess,\n  fetchError,\n  upStart,\n  upSuccess,\n  upError,\n} from './listAction';\n\n// axios.defaults.baseURL = 'http://localhost:4000';\n\nconst addList = (text, number) => dispatch => {\n  const item = { name: text, number: number };\n  dispatch(addStart());\n  axios\n    .post('/contacts', item)\n    .then(r => dispatch(addSuccess(r.data)))\n    .catch(error => dispatch(addError(error.message)));\n};\n\nconst deleteList = id => dispatch => {\n  dispatch(deleteStart());\n  axios\n    .delete(`/contacts/${id}`)\n    .then(() => dispatch(deleteSuccess(id)))\n    .catch(error => dispatch(deleteError(error.message)));\n};\nconst fetchList = () => dispatch => {\n  dispatch(fetchStart());\n  axios\n    .get(`/contacts`)\n    .then(r => dispatch(fetchSuccess(r.data)))\n    .catch(error => dispatch(fetchError(error.message)));\n};\n\nconst upList = (id, text, number) => dispatch => {\n  const item = { name: text, number: number };\n  dispatch(upStart());\n  axios\n    .patch(`/contacts/${id}`, item)\n    .then(r => dispatch(upSuccess(r.data)))\n    .catch(error => dispatch(upError(error.message)));\n};\n\nexport { addList, deleteList, fetchList, upList };\n","import { createSelector } from '@reduxjs/toolkit';\n\nconst getContactsItems = state => state.contacts.items;\n\nconst getFilter = state => state.contacts.filter;\n\nconst getFilterContact = createSelector(\n  [getContactsItems, getFilter],\n  (items, filter) => {\n    const filterToLowerCase = filter.toLowerCase();\n    return items.filter(({ name }) =>\n      name.toLowerCase().includes(filterToLowerCase),\n    );\n  },\n);\n\nexport { getContactsItems, getFilterContact, getFilter };\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport s from './UpData.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { upList, fetchList } from '../../redux/Contacts/listOperations';\nimport { getContactsItems } from '../../redux/Contacts/contacts-selectors';\n\nconst UpDate = ({ propNumber, propName, id, propAlert }) => {\n  const dispatch = useDispatch();\n\n  const contacts = useSelector(getContactsItems);\n\n  const [text, setText] = useState('');\n  const [number, setNumber] = useState('');\n  const [alert, setAlert] = useState(false);\n\n  const phonebookValue = e => {\n    if (e.target.value !== '') {\n      setText(e.target.value);\n    }\n  };\n  const numberValue = e => setNumber(e.target.value);\n\n  const btnClick = e => {\n    e.preventDefault();\n\n    if (\n      !alert &&\n      contacts.map(e => e.name.toLowerCase()).includes(text.toLowerCase()) &&\n      text !== ''\n    ) {\n      propAlert('name');\n      setTimeout(() => {\n        setText('');\n        setNumber('');\n      }, 500);\n      setTimeout(() => {\n        setAlert(false);\n      }, 3000);\n    } else {\n      if (text === '' && number !== '' && number !== propNumber) {\n        dispatch(upList(id, propName, number));\n      } else if (number === '' && text !== '') {\n        dispatch(upList(id, text, propNumber));\n      } else if (number === '' && text === '') {\n        return;\n      } else if (number !== '' && text !== '') {\n        dispatch(upList(id, text, number));\n      }\n      setText('');\n      setNumber('');\n      setTimeout(() => {\n        dispatch(fetchList());\n      }, 250);\n    }\n  };\n\n  return (\n    <form className={s.form} onSubmit={btnClick}>\n      <label className={s.label}>\n        <input\n          className={s.input}\n          type=\"text\"\n          value={text}\n          placeholder=\"Введите новое имя\"\n          onChange={phonebookValue}\n        />\n      </label>\n      &nbsp;\n      <label className={s.label}>\n        <input\n          className={s.input}\n          type=\"number\"\n          max=\"9999999999\"\n          value={number}\n          placeholder=\"Введите новый номер телефона\"\n          onChange={numberValue}\n        />\n      </label>\n      {!alert ? (\n        <button type=\"submit\" className={s.button}>\n          Обновить\n        </button>\n      ) : (\n        <button type=\"submit\" disabled className={s.button}>\n          Обновить\n        </button>\n      )}\n    </form>\n  );\n};\nUpDate.propTypes = {\n  phonebookValue: PropTypes.func,\n};\n\nexport default UpDate;\n","import s from './Contacts.module.css';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport { deleteList, fetchList } from '../../redux/Contacts/listOperations';\nimport React, { useState, useEffect } from 'react';\nimport { getFilterContact } from '../../redux/Contacts/contacts-selectors';\nimport UpDate from '../UpDate/UpDate';\n\nconst Contact = ({ alert }) => {\n  const dispatch = useDispatch();\n\n  const [clickUp, setClickUp] = useState(false);\n\n  const contacts = useSelector(getFilterContact);\n\n  useEffect(() => {\n    dispatch(fetchList());\n  }, [dispatch]);\n\n  const onClick = e => {\n    setClickUp(e);\n  };\n\n  return (\n    <div className={s.div}>\n      <TransitionGroup component=\"ul\" className={s.ul}>\n        {contacts.map(e => (\n          <CSSTransition key={e.id} classNames={s} timeout={250}>\n            <li className={s.li} key={e.id} id={e.id}>\n              <span>\n                <span className={s.span}>{e.name}</span>\n                <span className={s.span2}>{e.number}</span>\n              </span>\n              <button\n                className={s.button}\n                type=\"submit\"\n                onClick={() => onClick(!clickUp)}\n              >\n                {clickUp ? 'Закрыть' : 'Обновить'}\n              </button>\n              <button\n                className={s.button}\n                type=\"submit\"\n                onClick={() => dispatch(deleteList(e.id))}\n              >\n                Удалить\n              </button>\n              {clickUp && (\n                <UpDate\n                  id={e.id}\n                  propAlert={alert}\n                  propName={e.name}\n                  propNumber={e.number}\n                />\n              )}\n            </li>\n          </CSSTransition>\n        ))}\n      </TransitionGroup>\n    </div>\n  );\n};\n\nexport default Contact;\n\nContact.propTypes = {\n  contacts: PropTypes.array,\n  deleteList: PropTypes.func,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport s from './Phonebook.module.css';\n\nconst Phonebook = ({ phonebookValue }) => {\n  const [text, setText] = useState('');\n  const [number, setNumber] = useState('');\n\n  const phonebookVal = e => setText(e.target.value);\n\n  const numberValue = e => setNumber(e.target.value);\n\n  const btnClick = e => {\n    e.preventDefault();\n    phonebookValue(text, number);\n    setText('');\n    setNumber('');\n  };\n\n  return (\n    <form className={s.form} onSubmit={btnClick}>\n      <label className={s.label}>\n        Имя\n        <input\n          className={s.input}\n          type=\"text\"\n          value={text}\n          placeholder=\"Введите имя\"\n          onChange={phonebookVal}\n        />\n      </label>\n\n      <label className={s.label}>\n        Номер\n        <input\n          className={s.input}\n          type=\"number\"\n          max=\"9999999999\"\n          value={number}\n          placeholder=\"Введите номер телефона\"\n          onChange={numberValue}\n        />\n      </label>\n      <br />\n      <button type=\"submit\" className={s.button}>\n        Добавить контакт\n      </button>\n    </form>\n  );\n};\n\nPhonebook.propTypes = {\n  phonebookValue: PropTypes.func,\n};\n\nexport default Phonebook;\n","import PropTypes from 'prop-types';\nimport s from './Filter.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { filterList } from '../../redux/Contacts/listAction';\nimport { getFilter } from '../../redux/Contacts/contacts-selectors';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(getFilter);\n  return (\n    <div className={s.container}>\n      <label>\n        Фильтр <br />\n        <input\n          value={filter}\n          className={s.input}\n          type=\"text\"\n          placeholder=\"Введите имя \"\n          onChange={e => dispatch(filterList(e.target.value))}\n        />\n      </label>\n    </div>\n  );\n};\n\nFilter.propTypes = {\n  filter: PropTypes.string,\n};\n\nexport default Filter;\n","import s from './Alert.module.css';\n\nexport default function Alert({ massage }) {\n  return (\n    <div className={s.div}>\n      <h3 className={s.h1}>{massage}</h3>\n    </div>\n  );\n}\n","import { useState, useEffect, useCallback } from 'react';\nimport s from './Contacts.module.css';\nimport Contact from '../../Components/Contacts/Contact';\nimport Phonebook from '../../Components/Phonebook/Phonebook';\nimport Filter from '../../Components/Filter/Filter';\nimport { CSSTransition } from 'react-transition-group';\nimport Alert from '../../Components/Alert/Alert';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addList } from '../../redux/Contacts/listOperations';\nimport { getContactsItems } from '../../redux/Contacts/contacts-selectors';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n\n  const contacts = useSelector(getContactsItems);\n\n  const [text, setText] = useState('');\n  const [text2, setText2] = useState('');\n  const [message, setMessage] = useState(false);\n  const [message2, setMessage2] = useState(false);\n  const [alert, setAlert] = useState(false);\n\n  const luseFanc = textAlarm => {\n    setMessage(true);\n    setText2(textAlarm);\n    setAlert(false);\n    setTimeout(() => {\n      setMessage(false);\n      setText2('');\n      setText('');\n    }, 3000);\n  };\n\n  const mapContacts = useCallback(() => {\n    return contacts.map(e => e.name.toLowerCase()).includes(text.toLowerCase());\n  }, [contacts, text]);\n\n  useEffect(() => {\n    if (alert === 'name') {\n      luseFanc('Контакт с таким именем уже существует!');\n    }\n  }, [alert]);\n\n  useEffect(() => {\n    if (!message && mapContacts() && text !== '') {\n      luseFanc('Такой контакт уже существует!');\n    }\n  }, [mapContacts, message, text]);\n\n  const phonebookValue = (text, number) => {\n    if (text !== '' && number !== '' && mapContacts() === false) {\n      dispatch(addList(text, number));\n    } else {\n      setMessage2(true);\n      setText2('Заполните все поля');\n      setTimeout(() => {\n        setMessage2(false);\n        setText2('');\n      }, 3000);\n    }\n    if (mapContacts()) {\n      setText(text);\n      return;\n    }\n  };\n  const alertFunc = e => {\n    if (e) {\n      setAlert(e);\n    }\n  };\n\n  return (\n    <div className={s.App}>\n      <div className={s.notif}>\n        <CSSTransition\n          in={true}\n          appear={true}\n          classNames={s}\n          timeout={500}\n          unmountOnExit\n        >\n          <h1>Phonebook</h1>\n        </CSSTransition>\n        <div className=\"alert\">\n          <CSSTransition\n            in={message || message2}\n            classNames=\"alert\"\n            timeout={250}\n            unmountOnExit\n          >\n            <Alert massage={text2} />\n          </CSSTransition>\n        </div>\n      </div>\n      <Phonebook phonebookValue={phonebookValue} />\n      <CSSTransition\n        in={contacts.length > 1}\n        classNames=\"filter\"\n        timeout={250}\n        unmountOnExit\n      >\n        <Filter />\n      </CSSTransition>\n      <Contact alert={alertFunc} />\n    </div>\n  );\n};\n\nexport default Contacts;\n"],"sourceRoot":""}